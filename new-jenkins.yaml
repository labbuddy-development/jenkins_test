#cloud-config
package_update: true
packages:
  - openjdk-21-jdk
  - curl
  - wget

runcmd:
  # Add Jenkins GPG key and repo
  - mkdir -p /etc/apt/keyrings
  - curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | tee /etc/apt/keyrings/jenkins-keyring.asc > /dev/null
  - echo "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/" > /etc/apt/sources.list.d/jenkins.list
  - apt update
  - apt install -y jenkins
  - apt install -y python3 python3-pip python3-venv

  # Disable Jenkins setup wizard
  - echo 'JAVA_ARGS="-Djenkins.install.runSetupWizard=false"' > /etc/default/jenkins

  # Create Groovy script for admin user
  - mkdir -p /var/lib/jenkins/init.groovy.d
  - |
    cat <<'EOF' > /var/lib/jenkins/init.groovy.d/basic-security.groovy
    #!groovy
    import jenkins.model.*
    import hudson.security.*

    def instance = Jenkins.getInstance()
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount("admin", "labuddy@123")
    instance.setSecurityRealm(hudsonRealm)

    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    strategy.setAllowAnonymousRead(false)
    instance.setAuthorizationStrategy(strategy)

    instance.setInstallState(jenkins.install.InstallState.INITIAL_SETUP_COMPLETED)
    instance.save()
    EOF

  - |
    cat <<'EOF' > /var/lib/jenkins/init.groovy.d/disable-csrf.groovy
    #!groovy
    import jenkins.model.*
    def instance = Jenkins.getInstance()
    instance.setCrumbIssuer(null)
    instance.save()
    EOF

  # Plugin installation
  - chown -R jenkins:jenkins /var/lib/jenkins
  - systemctl restart jenkins
  - sleep 60
  - wget http://localhost:8080/jnlpJars/jenkins-cli.jar -O /tmp/jenkins-cli.jar

  - |
    cat <<EOF > /tmp/plugins.txt
    antisamy-markup-formatter
    git
    ldap
    mailer
    matrix-auth
    pam-auth
    pipeline-model-definition
    pipeline-stage-view
    pipeline-github-lib
    ssh-slaves
    timestamper
    email-ext
    workflow-aggregator
    workflow-job
    github-branch-source
    gradle
    ant
    dark-theme
    ws-cleanup
    cloudbees-folder
    github
    workflow-basic-steps
    EOF

  - |
    for plugin in $(cat /tmp/plugins.txt); do
      java -jar /tmp/jenkins-cli.jar -s http://localhost:8080 -auth admin:labuddy@123 install-plugin $plugin
    done

  - systemctl restart jenkins
  - sleep 60

  # Add Git credentials
  - |
    cat <<'EOF' > /var/lib/jenkins/init.groovy.d/add-credentials.groovy
    #!groovy
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.domains.*
    import com.cloudbees.plugins.credentials.impl.*
    import com.cloudbees.plugins.credentials.SystemCredentialsProvider
    import hudson.util.Secret

    def credentials = new UsernamePasswordCredentialsImpl(
        CredentialsScope.GLOBAL,
        "06166ada-1940-4823-9786-880934356bd8",  // ID
        "GitHub PAT Credentials",
        "raman-labbuddy",
        Secret.fromString("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")
    )

    SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), credentials)
    EOF

  # Create Jenkins pipeline job
  - |
    cat <<'EOF' > /var/lib/jenkins/init.groovy.d/create-pipeline-job.groovy
    #!groovy
    import jenkins.model.*
    import javaposse.jobdsl.plugin.ExecuteDslScripts
    import hudson.plugins.git.*
    import org.jenkinsci.plugins.workflow.job.*
    import org.jenkinsci.plugins.workflow.cps.*
    import hudson.triggers.*

    def jenkins = Jenkins.getInstance()
    def job = new WorkflowJob(jenkins, "AutoGitHubPipeline")

    job.setDescription("Pipeline triggered by GitHub push")
    job.setDisplayName("GitHub Auto Trigger Pipeline")

    job.definition = new CpsFlowDefinition("""
    pipeline {
        agent any

        stages {
            stage('Checkout') {
                steps {
                    checkout scmGit(
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[
                            credentialsId: '06166ada-1940-4823-9786-880934356bd8',
                            url: 'https://github.com/labbuddy-development/jenkins_test.git'
                        ]]
                    )
                }
            }
            stage('Setup Virtual Environment and Install Dependencies') {
                steps {
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install fastapi jinja2 aiofiles uvicorn
                    '''
                }
            }
            stage('Run Tests') {
                steps {
                    sh '''
                        . venv/bin/activate
                        python test.py
                    '''
                }
            }
        }
    }
    """, true)

    job.addTrigger(new SCMTrigger("H/2 * * * *")) // fallback polling
    job.addTrigger(new GitHubPushTrigger())

    jenkins.reload()
    jenkins.save()
    job.save()
    EOF

  - chown -R jenkins:jenkins /var/lib/jenkins
  - systemctl restart jenkins
